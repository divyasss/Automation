package org.mascrn.Scrnsht;

import java.util.concurrent.TimeUnit;

import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;


public class Baseclass {
	public static WebDriver driver;
	//browser name
    public static WebDriver getDriver(String browsername ) throws Throwable {
    	try {
    		if(browsername.equalsIgnoreCase("chrome")) {
    			System.setProperty("webdriver.chrome.driver", "C:\\Users\\User\\eclipse-workspace\\Scrnsht\\Driver\\chromedriver.exe");
    			driver=new ChromeDriver();
    		}
    		else {
    			System.out.println("browser is invalid");
    		}
    	}
    	catch(Exception e){
    		throw new Exception("invalid");  		
    		
    	}
    	driver.manage().window().maximize();
    	driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);   	
		
		return driver;
	}
    //get url
    public static void getUrl(String url) throws Exception {
    	
    		try {
				driver.get(url);
			} 
    		catch (Exception e) {			
				e.printStackTrace();
				throw new Exception("url not present");
			}  		    	
    		
    	
    }
    //mouse hover
    public static void mousehover(WebElement element) {
    	waitforvisibilityofelement(element);
    	Actions ac=new Actions(driver);
    	if(elementisDisplayed(element)&&elementisEnabled(element)) {
    		ac.moveToElement(element).build().perform();    		
    	}   

}
    //isenabled
    public static boolean elementisEnabled(WebElement element) {	
			
		
		boolean enabled = false;
		try {			
			enabled=element.isEnabled();
		} 
		catch (Exception e) {
			
			e.printStackTrace();
		}
		return enabled;
	}
    //isdisplayed
	public static boolean elementisDisplayed(WebElement element) {
		boolean displayed = false;
		try {			
			displayed=element.isDisplayed();
		} catch (Exception e) {
		
			e.printStackTrace();
		}
		return displayed;
	}
	//explictwait
	public static void waitforvisibilityofelement(WebElement element) {
		
			try {
				WebDriverWait wb=new WebDriverWait(driver,30);
				wb.until(ExpectedConditions.visibilityOf(element));
			} 
			catch (Exception e) {				
				e.printStackTrace();
			}	
		
	}
	//currenturl
	public static String getCurrentUrl() throws Exception {
		String currentUrl=null;
		try {
			currentUrl=driver.getCurrentUrl();
			System.out.println(currentUrl);
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception("url not present");
			
		}
		return currentUrl;
	}
	//scroll
	public static void scroll(WebElement element) {
		try {
			JavascriptExecutor je=(JavascriptExecutor) driver;
			je.executeScript("arguments[0].scrollIntoView()", element);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	//send keys
	public static void sendkeys(WebElement element, String value) throws Exception {		
		waitforvisibilityofelement(element);
		try {
			if(elementisDisplayed(element)&&elementisEnabled(element)) {
				element.clear();
				element.sendKeys(value);
			
			}
		} catch (Exception e) {			
			e.printStackTrace();
			throw new Exception("value not present");
		}
	}
	//gettitle
	public static String getTitle() {
		String title = null;
		try {			
			title = driver.getTitle();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    return title;
	}
	//dropdown
	public static void dropdown(WebElement element, String value, String i) {
        Select s=new Select(element);
		if(value.equals("index")) {			
			s.selectByIndex(Integer.parseInt(i));
			
		}
		else if(value.equals("value")) {
			s.selectByValue(value);
		}
		else if(value.equals("text")) {
			s.selectByVisibleText(value);
			
		}	
		
	}
	//to click
	public static void clickElement(WebElement element) {
		waitforvisibilityofelement(element);
		try {			
			element.click();
		} catch (Exception e) {			
			e.printStackTrace();			
		}
	}
	//navigate to
	public static void navigateto(String url) {
		try {
			driver.navigate().to(url);
		} catch (Exception e) {	
			
			e.printStackTrace();
		}		
	}	
	//navigate back
	public static void navigateback() {
		try {
			driver.navigate().back();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
